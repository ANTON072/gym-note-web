/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MypageRouteImport } from './routes/mypage'
import { Route as NotesRouteRouteImport } from './routes/notes.route'
import { Route as ExercisesRouteRouteImport } from './routes/exercises.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as NotesIndexRouteImport } from './routes/notes.index'
import { Route as ExercisesIndexRouteImport } from './routes/exercises.index'
import { Route as NotesNoteIdRouteImport } from './routes/notes.$noteId'
import { Route as ExercisesNewRouteImport } from './routes/exercises.new'
import { Route as ExercisesExerciseIdRouteImport } from './routes/exercises.$exerciseId'
import { Route as NotesNoteIdIndexRouteImport } from './routes/notes.$noteId.index'
import { Route as NotesNoteIdMetaRouteImport } from './routes/notes.$noteId.meta'
import { Route as NotesNoteIdExerciseNewRouteImport } from './routes/notes.$noteId.exercise.new'
import { Route as NotesNoteIdExerciseExerciseIdRouteImport } from './routes/notes.$noteId.exercise.$exerciseId'

const MypageRoute = MypageRouteImport.update({
  id: '/mypage',
  path: '/mypage',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRouteRoute = NotesRouteRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesRouteRoute = ExercisesRouteRouteImport.update({
  id: '/exercises',
  path: '/exercises',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesIndexRoute = NotesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NotesRouteRoute,
} as any)
const ExercisesIndexRoute = ExercisesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ExercisesRouteRoute,
} as any)
const NotesNoteIdRoute = NotesNoteIdRouteImport.update({
  id: '/$noteId',
  path: '/$noteId',
  getParentRoute: () => NotesRouteRoute,
} as any)
const ExercisesNewRoute = ExercisesNewRouteImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => ExercisesRouteRoute,
} as any)
const ExercisesExerciseIdRoute = ExercisesExerciseIdRouteImport.update({
  id: '/$exerciseId',
  path: '/$exerciseId',
  getParentRoute: () => ExercisesRouteRoute,
} as any)
const NotesNoteIdIndexRoute = NotesNoteIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => NotesNoteIdRoute,
} as any)
const NotesNoteIdMetaRoute = NotesNoteIdMetaRouteImport.update({
  id: '/meta',
  path: '/meta',
  getParentRoute: () => NotesNoteIdRoute,
} as any)
const NotesNoteIdExerciseNewRoute = NotesNoteIdExerciseNewRouteImport.update({
  id: '/exercise/new',
  path: '/exercise/new',
  getParentRoute: () => NotesNoteIdRoute,
} as any)
const NotesNoteIdExerciseExerciseIdRoute =
  NotesNoteIdExerciseExerciseIdRouteImport.update({
    id: '/exercise/$exerciseId',
    path: '/exercise/$exerciseId',
    getParentRoute: () => NotesNoteIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/exercises': typeof ExercisesRouteRouteWithChildren
  '/notes': typeof NotesRouteRouteWithChildren
  '/mypage': typeof MypageRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRoute
  '/exercises/new': typeof ExercisesNewRoute
  '/notes/$noteId': typeof NotesNoteIdRouteWithChildren
  '/exercises/': typeof ExercisesIndexRoute
  '/notes/': typeof NotesIndexRoute
  '/notes/$noteId/meta': typeof NotesNoteIdMetaRoute
  '/notes/$noteId/': typeof NotesNoteIdIndexRoute
  '/notes/$noteId/exercise/$exerciseId': typeof NotesNoteIdExerciseExerciseIdRoute
  '/notes/$noteId/exercise/new': typeof NotesNoteIdExerciseNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mypage': typeof MypageRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRoute
  '/exercises/new': typeof ExercisesNewRoute
  '/exercises': typeof ExercisesIndexRoute
  '/notes': typeof NotesIndexRoute
  '/notes/$noteId/meta': typeof NotesNoteIdMetaRoute
  '/notes/$noteId': typeof NotesNoteIdIndexRoute
  '/notes/$noteId/exercise/$exerciseId': typeof NotesNoteIdExerciseExerciseIdRoute
  '/notes/$noteId/exercise/new': typeof NotesNoteIdExerciseNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/exercises': typeof ExercisesRouteRouteWithChildren
  '/notes': typeof NotesRouteRouteWithChildren
  '/mypage': typeof MypageRoute
  '/exercises/$exerciseId': typeof ExercisesExerciseIdRoute
  '/exercises/new': typeof ExercisesNewRoute
  '/notes/$noteId': typeof NotesNoteIdRouteWithChildren
  '/exercises/': typeof ExercisesIndexRoute
  '/notes/': typeof NotesIndexRoute
  '/notes/$noteId/meta': typeof NotesNoteIdMetaRoute
  '/notes/$noteId/': typeof NotesNoteIdIndexRoute
  '/notes/$noteId/exercise/$exerciseId': typeof NotesNoteIdExerciseExerciseIdRoute
  '/notes/$noteId/exercise/new': typeof NotesNoteIdExerciseNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/exercises'
    | '/notes'
    | '/mypage'
    | '/exercises/$exerciseId'
    | '/exercises/new'
    | '/notes/$noteId'
    | '/exercises/'
    | '/notes/'
    | '/notes/$noteId/meta'
    | '/notes/$noteId/'
    | '/notes/$noteId/exercise/$exerciseId'
    | '/notes/$noteId/exercise/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/mypage'
    | '/exercises/$exerciseId'
    | '/exercises/new'
    | '/exercises'
    | '/notes'
    | '/notes/$noteId/meta'
    | '/notes/$noteId'
    | '/notes/$noteId/exercise/$exerciseId'
    | '/notes/$noteId/exercise/new'
  id:
    | '__root__'
    | '/'
    | '/exercises'
    | '/notes'
    | '/mypage'
    | '/exercises/$exerciseId'
    | '/exercises/new'
    | '/notes/$noteId'
    | '/exercises/'
    | '/notes/'
    | '/notes/$noteId/meta'
    | '/notes/$noteId/'
    | '/notes/$noteId/exercise/$exerciseId'
    | '/notes/$noteId/exercise/new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExercisesRouteRoute: typeof ExercisesRouteRouteWithChildren
  NotesRouteRoute: typeof NotesRouteRouteWithChildren
  MypageRoute: typeof MypageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/mypage': {
      id: '/mypage'
      path: '/mypage'
      fullPath: '/mypage'
      preLoaderRoute: typeof MypageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises': {
      id: '/exercises'
      path: '/exercises'
      fullPath: '/exercises'
      preLoaderRoute: typeof ExercisesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes/': {
      id: '/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof NotesIndexRouteImport
      parentRoute: typeof NotesRouteRoute
    }
    '/exercises/': {
      id: '/exercises/'
      path: '/'
      fullPath: '/exercises/'
      preLoaderRoute: typeof ExercisesIndexRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
    '/notes/$noteId': {
      id: '/notes/$noteId'
      path: '/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdRouteImport
      parentRoute: typeof NotesRouteRoute
    }
    '/exercises/new': {
      id: '/exercises/new'
      path: '/new'
      fullPath: '/exercises/new'
      preLoaderRoute: typeof ExercisesNewRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
    '/exercises/$exerciseId': {
      id: '/exercises/$exerciseId'
      path: '/$exerciseId'
      fullPath: '/exercises/$exerciseId'
      preLoaderRoute: typeof ExercisesExerciseIdRouteImport
      parentRoute: typeof ExercisesRouteRoute
    }
    '/notes/$noteId/': {
      id: '/notes/$noteId/'
      path: '/'
      fullPath: '/notes/$noteId/'
      preLoaderRoute: typeof NotesNoteIdIndexRouteImport
      parentRoute: typeof NotesNoteIdRoute
    }
    '/notes/$noteId/meta': {
      id: '/notes/$noteId/meta'
      path: '/meta'
      fullPath: '/notes/$noteId/meta'
      preLoaderRoute: typeof NotesNoteIdMetaRouteImport
      parentRoute: typeof NotesNoteIdRoute
    }
    '/notes/$noteId/exercise/new': {
      id: '/notes/$noteId/exercise/new'
      path: '/exercise/new'
      fullPath: '/notes/$noteId/exercise/new'
      preLoaderRoute: typeof NotesNoteIdExerciseNewRouteImport
      parentRoute: typeof NotesNoteIdRoute
    }
    '/notes/$noteId/exercise/$exerciseId': {
      id: '/notes/$noteId/exercise/$exerciseId'
      path: '/exercise/$exerciseId'
      fullPath: '/notes/$noteId/exercise/$exerciseId'
      preLoaderRoute: typeof NotesNoteIdExerciseExerciseIdRouteImport
      parentRoute: typeof NotesNoteIdRoute
    }
  }
}

interface ExercisesRouteRouteChildren {
  ExercisesExerciseIdRoute: typeof ExercisesExerciseIdRoute
  ExercisesNewRoute: typeof ExercisesNewRoute
  ExercisesIndexRoute: typeof ExercisesIndexRoute
}

const ExercisesRouteRouteChildren: ExercisesRouteRouteChildren = {
  ExercisesExerciseIdRoute: ExercisesExerciseIdRoute,
  ExercisesNewRoute: ExercisesNewRoute,
  ExercisesIndexRoute: ExercisesIndexRoute,
}

const ExercisesRouteRouteWithChildren = ExercisesRouteRoute._addFileChildren(
  ExercisesRouteRouteChildren,
)

interface NotesNoteIdRouteChildren {
  NotesNoteIdMetaRoute: typeof NotesNoteIdMetaRoute
  NotesNoteIdIndexRoute: typeof NotesNoteIdIndexRoute
  NotesNoteIdExerciseExerciseIdRoute: typeof NotesNoteIdExerciseExerciseIdRoute
  NotesNoteIdExerciseNewRoute: typeof NotesNoteIdExerciseNewRoute
}

const NotesNoteIdRouteChildren: NotesNoteIdRouteChildren = {
  NotesNoteIdMetaRoute: NotesNoteIdMetaRoute,
  NotesNoteIdIndexRoute: NotesNoteIdIndexRoute,
  NotesNoteIdExerciseExerciseIdRoute: NotesNoteIdExerciseExerciseIdRoute,
  NotesNoteIdExerciseNewRoute: NotesNoteIdExerciseNewRoute,
}

const NotesNoteIdRouteWithChildren = NotesNoteIdRoute._addFileChildren(
  NotesNoteIdRouteChildren,
)

interface NotesRouteRouteChildren {
  NotesNoteIdRoute: typeof NotesNoteIdRouteWithChildren
  NotesIndexRoute: typeof NotesIndexRoute
}

const NotesRouteRouteChildren: NotesRouteRouteChildren = {
  NotesNoteIdRoute: NotesNoteIdRouteWithChildren,
  NotesIndexRoute: NotesIndexRoute,
}

const NotesRouteRouteWithChildren = NotesRouteRoute._addFileChildren(
  NotesRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExercisesRouteRoute: ExercisesRouteRouteWithChildren,
  NotesRouteRoute: NotesRouteRouteWithChildren,
  MypageRoute: MypageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
